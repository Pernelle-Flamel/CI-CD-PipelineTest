# .github/workflows/ci-cd.yml

name: Python-to-C CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/setup-python@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Check for requirements file
        run: |
          if [ ! -f "requirements.txt" ]; then
            echo "Error: requirements.txt not found!"
            exit 1
          fi

      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt || echo "Some dependencies failed to install."

  scan_python:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/setup-python@v2

      - name: Check if Python file exists
        run: |
          if [ ! -f "myprogram.py" ]; then
            echo "Error: myprogram.py not found!"
            exit 1
          fi

      - name: Run Bandit for Security Analysis on Python
        run: |
          source venv/bin/activate
          pip install --quiet bandit || echo "Failed to install Bandit."
          bandit -r myprogram.py || echo "Bandit scan found issues."

      - name: Run Safety for Dependency Vulnerability Check
        run: |
          source venv/bin/activate
          pip install --quiet safety || echo "Failed to install Safety."
          safety check -r requirements.txt || echo "Safety found dependency issues."

      - name: Run Pylint for Code Quality and Style Check on Python
        run: |
          source venv/bin/activate
          pip install --quiet pylint || echo "Failed to install Pylint."
          pylint myprogram.py || echo "Pylint found issues."

  compile_to_c:
    runs-on: ubuntu-latest
    needs: scan_python
    steps:
      - name: Checkout Code
        uses: actions/setup-python@v2

      - name: Ensure Cython is installed
        run: |
          source venv/bin/activate
          pip show cython || pip install cython

      - name: Compile Python Code to C using Cython
        run: |
          source venv/bin/activate
          cython --embed -o myprogram.c myprogram.py || echo "Failed to compile Python to C."

      - name: Verify C file creation
        run: |
          if [ ! -f "myprogram.c" ]; then
            echo "Error: C file not generated by Cython!"
            exit 1
          fi

  static_analysis_c:
    runs-on: ubuntu-latest
    needs: compile_to_c
    steps:
      - name: Checkout Code
        uses: actions/setup-python@v2

      - name: Run Cppcheck for Static Analysis on Generated C Code
        run: |
          if command -v cppcheck >/dev/null 2>&1; then
            cppcheck --enable=all --inconclusive --error-exitcode=1 myprogram.c || echo "Cppcheck found issues."
          else
            echo "Cppcheck not installed, skipping."
          fi

      - name: Run Flawfinder for Security Analysis on Generated C Code
        run: |
          sudo apt-get update -y && sudo apt-get install -y flawfinder || echo "Failed to install Flawfinder."
          flawfinder myprogram.c || echo "Flawfinder found issues."

  build_binary:
    runs-on: ubuntu-latest
    needs: static_analysis_c
    steps:
      - name: Checkout Code
        uses: actions/setup-python@v2

      - name: Compile C Code to Binary with GCC
        run: |
          if [ -f "myprogram.c" ]; then
            gcc -o myprogram myprogram.c $(python3-config --cflags --ldflags) || echo "Failed to compile binary."
          else
            echo "Error: myprogram.c not found!"
            exit 1
          fi

      - name: Verify Binary Creation
        run: |
          if [ ! -f "myprogram" ]; then
            echo "Error: Binary not created!"
            exit 1
          fi

  push_binary:
    runs-on: ubuntu-latest
    needs: build_binary
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/setup-python@v2

      - name: Add and Commit Binary to Repository
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          if [ -f "myprogram" ]; then
            git add myprogram
            git commit -m "Add compiled binary" || echo "No changes to commit"
            git push origin main || echo "Binary push skipped to prevent trigger"
          else
            echo "Binary not found, skipping push."

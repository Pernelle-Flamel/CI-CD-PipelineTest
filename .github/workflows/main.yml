# .github/workflows/ci-cd.yml

name: Python-to-C CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

  scan_python:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Run Bandit for Security Analysis on Python
        run: |
          source venv/bin/activate
          pip install bandit
          bandit -r myprogram.py

      - name: Run Safety for Dependency Vulnerability Check
        run: |
          source venv/bin/activate
          pip install safety
          safety check -r requirements.txt

      - name: Run Pylint for Code Quality and Style Check on Python
        run: |
          source venv/bin/activate
          pip install pylint
          pylint myprogram.py

  compile_to_c:
    runs-on: ubuntu-latest
    needs: scan_python
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Compile Python Code to C using Cython
        run: |
          source venv/bin/activate
          pip install cython
          cython --embed -o myprogram.c myprogram.py

  static_analysis_c:
    runs-on: ubuntu-latest
    needs: compile_to_c
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Run Cppcheck for Static Analysis on Generated C Code
        run: |
          cppcheck --enable=all --inconclusive --error-exitcode=1 myprogram.c

      - name: Run Flawfinder for Security Analysis on Generated C Code
        run: |
          sudo apt-get update
          sudo apt-get install -y flawfinder
          flawfinder myprogram.c

  build_binary:
    runs-on: ubuntu-latest
    needs: static_analysis_c
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Compile C Code to Binary with GCC
        run: |
          gcc -o myprogram myprogram.c $(python3-config --cflags --ldflags)

  push_binary:
    runs-on: ubuntu-latest
    needs: build_binary
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Add and Commit Binary to Repository
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add myprogram
          git commit -m "Add compiled binary" || echo "No changes to commit"
          git push origin main || echo "Binary push skipped to prevent trigger"
